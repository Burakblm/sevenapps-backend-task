name: Build and Deploy to GCP VM

on:
  push:
    branches:
      - main


jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Create credentials.json for upload and metadata-extraction
        run: |
          echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" > upload/app/services/credentials.json
          echo "${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}" > metadata-extraction/app/services/credentials.json

      - name: Build and push chat service Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./chat
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/chat-service:latest

      - name: Build and push metadata-extraction service Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./metadata-extraction
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/metadata-extraction-service:latest

      - name: Build and push upload service Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./upload
          push: true
          tags: ${{ secrets.DOCKER_HUB_USERNAME }}/upload-service:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key
        env:
          SSH_PRIVATE_KEY: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.GCP_VM_HOST }} >> ~/.ssh/known_hosts

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: SSH into GCP VM and deploy
        env:
          HOST: ${{ secrets.GCP_VM_HOST }}
          USER: ${{ secrets.GCP_VM_USERNAME }}
          KAFKA_SERVER: ${{ secrets.KAFKA_SERVER }}
          KAFKA_PORT: ${{ secrets.KAFKA_PORT }}
          KAFKA_TOPIC: ${{ secrets.KAFKA_TOPIC }}
          POSTGRES_SERVER: ${{ secrets.POSTGRES_SERVER }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          GOOGLE_GENERATIVE_AI_API: ${{ secrets.GOOGLE_GENERATIVE_AI_API }}
        run: |
            ssh $USER@$HOST <<EOF
            cd /home/${USER}
                
            if [ -d "sevenapps-backend-task" ]; then
              cd sevenapps-backend-task
              git pull origin main
            else
              git clone https://github.com/Burakblm/sevenapps-backend-task.git
              cd sevenapps-backend-task
            fi

            if [ -f ".env" ]; then
              rm .env
            fi

            echo "KAFKA_SERVER=$KAFKA_SERVER" >> .env
            echo "KAFKA_PORT=$KAFKA_PORT" >> .env
            echo "KAFKA_TOPIC=$KAFKA_TOPIC" >> .env
            echo "POSTGRES_SERVER=$POSTGRES_SERVER" >> .env
            echo "POSTGRES_PORT=$POSTGRES_PORT" >> .env
            echo "POSTGRES_USER=$POSTGRES_USER" >> .env
            echo "POSTGRES_PASSWORD=$POSTGRES_PASSWORD" >> .env
            echo "POSTGRES_DB=$POSTGRES_DB" >> .env
            echo "BUCKET_NAME=$BUCKET_NAME" >> .env
            echo "GOOGLE_GENERATIVE_AI_API=$GOOGLE_GENERATIVE_AI_API" >> .env

            cp /home/$USER/credentials.json upload/app/services/credentials.json
            cp /home/$USER/credentials.json metadata-extraction/app/services/credentials.json

            sudo docker-compose -f docker-compose-prod.yml down -v
            sudo docker-compose -f docker-compose-prod.yml up --build -d
        
            EOF
